@page "/"
@page "/charts"
@layout MainLayout
@inherits Muserank2.Pages.ChartsComponent

@using Radzen
@using Radzen.Blazor
@using Muserank2.Models.Muse
<RadzenContent Container="main">
  <ChildContent>
    <RadzenHeading Size="H1" Text="Charts">
    </RadzenHeading>
      <RadzenLink Path="#graph" Text="グラフへ" Visible="false" />
    <div class="row">
        <div class="col-md-12">
            <RadzenSplitButton Icon="get_app" style="margin-bottom: 10px; margin-left: 0px" Text="Export" Click="@Splitbutton0Click">
                <ChildContent>
                    <RadzenSplitButtonItem Text="Excel" Value="xlsx">
                    </RadzenSplitButtonItem>
                    <RadzenSplitButtonItem Text="CSV" Value="csv">
                    </RadzenSplitButtonItem>
                </ChildContent>
            </RadzenSplitButton>
            <RadzenTextBox Placeholder="Search ...グリッドとグラフが変化します" style="display: block; margin-bottom: 10px; width: 100%" Name="Textbox0" @oninput="@(async(args) => {search = $"{args.Value}";await Load(); seachprm =(string) args.Value; })" Value="@seachprm">
            </RadzenTextBox>
            <RadzenGrid @ref="grid0" AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@getChartsResult" FilterMode="FilterMode.Advanced" TItem="Muserank2.Models.Muse.Chart" PageSize="20">
                <Columns>
                    <RadzenGridColumn TItem="Muserank2.Models.Muse.Chart" Property="NENDO" Title="NENDO">
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Muserank2.Models.Muse.Chart" Property="GENRE" Title="GENRE">
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Muserank2.Models.Muse.Chart" Property="HYOKA_NUM" Title="HYOKA NUM">
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Muserank2.Models.Muse.Chart" Property="KYOKU_NAME" Title="KYOKU NAME">
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Muserank2.Models.Muse.Chart" Property="AUTHOR_NAME" Title="AUTHOR NAME">
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Muserank2.Models.Muse.Chart" Property="HOUR" Title="HOUR">
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Muserank2.Models.Muse.Chart" Property="MINUTE" Title="MINUTE">
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Muserank2.Models.Muse.Chart" Property="SECOND" Title="SECOND">
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Muserank2.Models.Muse.Chart" Property="MEMBER" Title="MEMBER">
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Muserank2.Models.Muse.Chart" Property="FILE_SIZE" Title="FILE SIZE">
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="Muserank2.Models.Muse.Chart" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Visible="false" Width="70px">
                        <Template Context="muserank2ModelsMuseChart">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@((args) =>GridDeleteButtonClick(args, muserank2ModelsMuseChart))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>

            <h2 id="graph">グラフ</h2>
            <RadzenTextBox Placeholder="Search ...グリッドとグラフが変化します" style="display: block; margin-bottom: 10px; width: 100%" Name="Textbox1" @oninput="@(async(args) => {search = $"{args.Value}";await Load(); seachprm =(string) args.Value; })" Value="@seachprm">
            </RadzenTextBox>

            ファイルサイズ<RadzenNumeric TValue="int" Min="1" Name="FileSize_min" @bind-Value="@filesize" />KB以上
            <RadzenChart Style="height:800px;">
                <RadzenBarSeries Data="@getChartsResult.GroupBy(x => x.AUTHOR_NAME).Select( x => new { Name = x.Key, FileSize = x.Sum(y => y.FILE_SIZE)}).OrderBy(x => x.FileSize).Where(x => x.FileSize >= 1024 * filesize)" Title="Bytes" ValueProperty="FileSize" CategoryProperty="Name" />
                <RadzenValueAxis>
                    <RadzenAxisTitle Text=@string.Format("作者別ファイルサイズ最大　ファイルサイズ{0}KB以上",filesize)></RadzenAxisTitle>
                </RadzenValueAxis>
            </RadzenChart>

            登録曲数<RadzenNumeric TValue="int" Min="1" Name="KyokuSu_min" @bind-Value="@kyokusu" />以上
            <RadzenChart Style="height:800px;">
                <RadzenBarSeries Data="@getChartsResult.GroupBy(x => x.AUTHOR_NAME).Select( x => new { Name = x.Key, FileSize = (double)(x.Count(y => y.HYOKA_NUM >= 2)) / x.Count(y => y.FILE_SIZE >= 0), KyokuSu = x.Count(y => y.FILE_SIZE >= 0)}).OrderBy(x => x.FileSize).Where(x => x.KyokuSu >= kyokusu)" Title="★獲得率" ValueProperty="FileSize" CategoryProperty="Name" />
                <RadzenValueAxis Max="1.0" Min="0" Step="0.1" StrokeWidth="1">
                    <RadzenAxisTitle Text=@string.Format("★獲得率　登録{0}曲以上",kyokusu)></RadzenAxisTitle>
                </RadzenValueAxis>
            </RadzenChart>

            <RadzenChart Style="height:800px;">
                <RadzenBarSeries Data="@getChartsResult.GroupBy(x => x.AUTHOR_NAME).Select( x => new { Name = x.Key, FileSize = (double)(x.Count(y => y.HYOKA_NUM >= 1)) / x.Count(y => y.FILE_SIZE >= 0), KyokuSu = x.Count(y => y.FILE_SIZE >= 0)}).OrderBy(x => x.FileSize).Where(x => x.KyokuSu >= kyokusu)" Title="☆以上獲得率" ValueProperty="FileSize" CategoryProperty="Name" />
                <RadzenValueAxis Max="1.0" Min="0" Step="0.1">
                    <RadzenAxisTitle Text=@string.Format("☆以上獲得率　登録{0}曲以上",kyokusu)></RadzenAxisTitle>
                </RadzenValueAxis>
            </RadzenChart>

            <RadzenChart Style="height:400px;">
                <RadzenDonutSeries Data="@getChartsResult.GroupBy(x => x.GENRE).Select( x => new {Name = x.Key, Count = x.Count()}).OrderByDescending(x => x.Count)" CategoryProperty="Name" ValueProperty="Count" Title="ジャンルシェアー" />
            </RadzenChart>
            <RadzenDropDown TValue="string" Data="@getChartsResult.Select(x => x.GENRE).Distinct()" @bind-Value="@dropGenre" />
            <RadzenChart Style="height:400px;">
                <RadzenDonutSeries Data="@getChartsResult.GroupBy(x => new {Author = x.AUTHOR_NAME, Genre = x.GENRE}).Select(x => new {Name = (x.Count() >= kyokusu) ?  x.Key.Author:  "その他", Count = x.Count(),Genre = x.Key.Genre}).Where(x => x.Genre == dropGenre).GroupBy(x => x.Name).Select(x => new {Auther = x.Key, RenderingOrder = x.Sum(y =>y.Count)}).OrderByDescending(x => x.RenderingOrder)" Title="ジャンル別作成者シェアー" CategoryProperty="Auther" ValueProperty="RenderingOrder" RenderingOrder="1"  />
            </RadzenChart>
            <RadzenChart Style="height:800px;">
                <RadzenBarSeries Data="@getChartsResult.GroupBy(x => new {Author = x.AUTHOR_NAME, Genre = x.GENRE}).Select(x => new {Name = x.Key.Author, Count = x.Count(),Genre = x.Key.Genre}).Where(x => x.Genre == dropGenre).OrderBy(x => x.Count).Where(x => x.Count >= kyokusu)" Title="ジャンル別Top作成者" ValueProperty="Count" CategoryProperty="Name" RenderingOrder="1" />
                <RadzenValueAxis Min="0" Step="1">
                    <RadzenAxisTitle Text=@string.Format("ジャンル別Top作成者　登録{0}曲以上",kyokusu)></RadzenAxisTitle>
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
  </ChildContent>
</RadzenContent>
